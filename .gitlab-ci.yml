image: harbor.fptplay.net/image-base/kube-tool:master-build-5641

variables:
  DOCKER_DRIVER: "overlay"
  HELM_REPO: "https://chart.fptplay.net"
  HELM_CHART: "fplay/fpl"
  NAME_SECRET: "web-fptplay-blog-${CI_ENVIRONMENT_NAME}"
  NAME_SPACE: "fplay-web"
  IMAGE_TAG_PREFIX: "fplay-web"
  SERVICE_NAME: "web-fptplay-blog"
  PVC_NAME: "none"
  PATH_MOUNT: "none"
  PORT: "443"
  SECRET_MOUNT_PATH: "none"
  SECRET_KEY: "none"
  SECRET_MOUNT_PATH: "/var/www/html/wp-config.php"
  SECRET_KEY: "wp-config.php"
  ENABLE_FILE_VARIABLES: "true"
  ENABLE_OS_VARIABLES: "false"
  ENABLE_PVC: "false"
  ENABLE_PORT: "true"
  ENABLE_ALIAS: "false"
  ALIAS_IP: "10.0.4.6"
  ALIAS_HOSTNAME: "api.fptplay.net"
  MIN_SCALE: "30"
  MAX_SCALE: "40"
  CPU_SCALE: "150"

stages:
  - build
  - deploy

.common: &common |
  set -eo pipefail

    [[ "$TRACE" ]] && set -x

    init_kube_config() {
      if [ $CI_ENVIRONMENT_NAME == "dev"  ]; then
        export KUBE_CONFIG=${KUBE_CONFIG_STAGING}
        SIZE_PVC="none"
        REPLICA_COUNT=1
        INGRESS_HOST=blog-dev.fptplay.vn
        LIMIT_CPU=1000m
        LIMIT_RAM=1000Mi
        REQUEST_CPU=50m
        REQUEST_RAM=50m
        AUTO_SCALE=false
      fi
      cat /etc/hosts
      mkdir -p $HOME/.kube
      echo "initilize kube config"
      echo ${KUBE_CONFIG} | base64 -d > $HOME/.kube/config
    }

    review_cluster() {
      kubectl get pod -n ${NAME_SPACE}
    }
    init_helm(){
      echo "init helm"
      helm repo add fplay $HELM_REPO
      helm repo update
    }

.init_kube: &init_kube |
  init_kube_config
  init_helm
  review_cluster

.registry: &registry |
  login(){
    echo "Logging to Gitlab Container Registry with CI credenticals..."
    docker login ${DOCKER_PRIVATE_REGISTRY} -u ${CI_BUILD_USER} -p ${CI_BUILD_TOKEN}
  }

  build(){
    DOCKER_BUILDKIT=1 docker build --pull -t ${DOCKER_PRIVATE_REGISTRY}/${IMAGE_TAG_PREFIX}/${SERVICE_NAME}:${CI_COMMIT_REF_NAME}-build-${CI_PIPELINE_ID} --build-arg branch=${CI_COMMIT_REF_NAME} --build-arg http_proxy="http://proxy.hcm.fpt.vn:80" --build-arg https_proxy="http://proxy.hcm.fpt.vn:80" .
    echo "Pushing to Gitlab Container Registry..."
    docker push ${DOCKER_PRIVATE_REGISTRY}/${IMAGE_TAG_PREFIX}/${SERVICE_NAME}:${CI_COMMIT_REF_NAME}-build-${CI_PIPELINE_ID}
  }

  clean(){
    echo "Removing unnecessary image on Gitlab Container Registry..."
    docker rm $(docker ps -a -q -f ancestor=$DOCKER_PRIVATE_REGISTRY) 2>&1
    docker rmi $(docker images | grep "^<none>" | awk "{print \$3}") 2>&1
  }

.deploy: &deploy |
  RELEASE_NAME="${SERVICE_NAME}-${CI_ENVIRONMENT_NAME}"
  echo "deploy ${RELEASE_NAME} to ${CI_ENVIRONMENT_NAME} environment"
  helm upgrade ${RELEASE_NAME} ${HELM_CHART} \
    --install \
    --set image.tag=${CI_COMMIT_REF_NAME}-build-${CI_PIPELINE_ID} \
    --set image.repository=${DOCKER_PRIVATE_REGISTRY}/${IMAGE_TAG_PREFIX}/${SERVICE_NAME} \
    --set ingress.host=${INGRESS_HOST} \
    --set service.internalPort=${PORT} \
    --set replicaCount=${REPLICA_COUNT} \
    --set namesecret=${NAME_SECRET} \
    --set Configmap.enabled=${ENABLE_FILE_VARIABLES} \
    --set Secret.enabled=${ENABLE_OS_VARIABLES} \
    --set persistentVolume.enabled=${ENABLE_PVC} \
    --set persistentVolume.existingClaim=${PVC_NAME} \
    --set persistentVolume.mountPath=${PATH_MOUNT} \
    --set persistentVolume.size=${SIZE_PVC} \
    --set hostPath.enabled=${ENABLE_HOSTPATH} \
    --set replicaCount=${REPLICA_COUNT} \
    --set Secret.mountPath=${SECRET_MOUNT_PATH} \
    --set Secret.key=${SECRET_KEY} \
    --set limit.limitsCpu=$LIMIT_CPU \
    --set limit.limitsMemory=$LIMIT_RAM \
    --set request.requestsCpu=$REQUEST_CPU \
    --set request.requestsMemory=$REQUEST_RAM \
    --set autoscaling.enabled=$AUTO_SCALE \
    --set autoscaling.minReplicas=$MIN_SCALE \
    --set autoscaling.maxReplicas=$MAX_SCALE \
    --set autoscaling.targetCPUUtilizationPercentage=$CPU_SCALE \
    --set port.enabled=$ENABLE_PORT \
    --set environment.env=${CI_ENVIRONMENT_NAME} \
    --set serviceName=${SERVICE_NAME} \
    --set hostAliases.enabled=$ENABLE_ALIAS \
    --set hostAliases.ip=$ALIAS_IP \
    --set hostAliases.hostnames=$ALIAS_HOSTNAME \
    --namespace="${NAME_SPACE}"

build_image:
  image: harbor.fptplay.net/image-base/docker:latest
  stage: build
  before_script:
    - sed -i -e "s/BRANCH/${CI_COMMIT_REF_NAME}/g" Dockerfile
    - *registry
  script:
    - login
    - build
  after_script:
    - clean
  only:
    refs:
      - dev
      - staging
      - master

develop_deploy:
  stage: deploy

  before_script:
    - *common
  script:
    - *init_kube
    - *deploy
  environment:
    name: dev
  only:
    refs:
      - dev

# production_deploy:
#   stage: deploy

#   before_script:
#     - *common
#   script:
#     - *init_kube
#     - *deploy
#   environment:
#     name: production
#   only:
#     refs:
#       - master
#   when: manual